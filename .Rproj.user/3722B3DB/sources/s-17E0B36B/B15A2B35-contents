
library(shiny)
library(ggplot2)
library(tidyr)
library(ggbeeswarm)
library(car)
library(agricolae)

#shinyApp(
ui <-  tagList(
  navbarPage(
    "Continuous ~ Catagorical",
    
    # Tab 1 ----
    tabPanel(
      "Upload and visualization",
      titlePanel("Upload and visualize data"),
      sidebarLayout(
        sidebarPanel(
          
          fileInput("file1", "Choose CSV File",
                    multiple = FALSE,
                    accept = c(
                      "text/csv",
                      "text/comma-separated-values,text/plain",
                      ".csv"
                    )
          ),
          
          checkboxInput("gather", label = "Convert to long format", value = TRUE),
          
          numericInput("FirstGather", label = "First data column", value = 1),
          
          numericInput("LastGather", label = "Last data column", value = 1),
          
          checkboxInput("ColorBy", label = "Color by key", value = TRUE),
          ## Horizontal line ----
          ## tags$hr(),
          
          textInput("ivar", label = ("Independent Variable"), value = ""),
          
          textInput("dvar", label = ("Dependent Variable"), value = "")
        ),
        
        mainPanel(
          tableOutput("contents"),
          
          plotOutput("user_plot")
        )
      )
    ),
    
    # Tab 2 ----
    tabPanel(
      "Statistical Analysis",
      
      sidebarPanel(
        radioButtons("RunMainEffect", "Run Main Effect Test?",
                     choices = c("No", "Yes")
        ),
        radioButtons("RunPostHoc", "Run Post Hoc Test?",
                     choices = c("No", "Yes")
        )
      ),
      
      
      mainPanel(
        tableOutput("main_effect"),
        
        tableOutput("post_hoc_test")
      )
    )
  )
)


server <-  function(input, output) {
  output$contents <- renderTable({
    
    # input$file1 will be NULL initially. After the user selects
    # and uploads a file, head of that data file by default,
    # or all rows if selected, will be shown.
    
    req(input$file1)
    
    # when reading semicolon separated files,
    # having a comma separator causes `read.csv` to error
    tryCatch({
      df <- read.csv(input$file1$datapath)
    },
    error = function(e) {
      # return a safeError if a parsing error occurs
      stop(safeError(e))
    }
    )
    return(head(df))
  })
  
  output$user_plot <- renderPlot({
    req(input$file1)
    req(input$ColorBy)
    
    df <- read.csv(input$file1$datapath) # repeat from above
    
    if (input$gather == TRUE) {
      df <- gather(df, "Key", "Value", seq(
        from = input$FirstGather,
        to = input$LastGather,
        by = 1
      ))
    }
    
    if (input$ColorBy == FALSE) {
      ggplot(df, aes_string(x = "Key", y = "Value")) +
        ggbeeswarm::geom_quasirandom() +
        labs(x = input$ivar, y = input$dvar)
    } else {
      ggplot(df, aes_string(x = "Key", y = "Value", color = "Key")) +
        ggbeeswarm::geom_quasirandom() +
        labs(x = input$ivar, y = input$dvar)
    }
  })
  
  output$main_effect <- renderTable({
    req(input$file1)
    
    tryCatch({
      df <- read.csv(input$file1$datapath)
    },
    error = function(e) {
      # return a safeError if a parsing error occurs
      stop(safeError(e))
    }
    )
    
    if (input$gather == TRUE) {
      df <- gather(df, "Key", "Value", seq(
        from = input$FirstGather,
        to = input$LastGather,
        by = 1
      ))
    }
    
    
    if (input$RunMainEffect == "Yes") {
      fm <- lm(Value ~ Key, data = df)
      
      main_effect <- car::Anova(fm, type = "III")
    }
    
    return(main_effect)
  })
  
  
  output$post_hoc_test <- renderTable({
    req(input$file1)
    
    tryCatch({
      df <- read.csv(input$file1$datapath)
    },
    error = function(e) {
      # return a safeError if a parsing error occurs
      stop(safeError(e))
    }
    )
    
    if (input$gather == TRUE) {
      df <- gather(df, "Key", "Value", seq(
        from = input$FirstGather,
        to = input$LastGather,
        by = 1
      ))
    }
    
    
    if (input$RunMainEffect == "Yes") {
      fm <- lm(Value ~ Key, data = df)
      
      main_effect <- car::Anova(fm, type = "III")
    }
    
    if (input$RunPostHoc == "Yes") {
      results <- agricolae::HSD.test(fm, trt = "Key")
      
      post_hoc_test <- results$groups
    }
    return(post_hoc_test)
  })
}


#M <- read.csv("C:/Users/Daniel/Desktop/class_diving_data.csv")
#M <- gather(M, "Key", "Value", 2:6)
#fm <- lm(Value ~ Key, data = M)

#ss <- agricolae::HSD.test(fm, trt = "Key")
#ss$groups

shiny::shinyApp(ui = ui, server = server)