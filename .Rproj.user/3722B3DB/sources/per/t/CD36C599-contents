---
title: "Untitled"
author: "Daniel R. Kick"
date: "February 12, 2019"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}

library(shiny)
library(ggplot2)
library(tidyr)
library(ggbeeswarm)
library(car)
library(rethinking)
library(cowplot)
library(ggridges)
library(dplyr) # for arrange
library(datasets) # for chickwts data
```



```{r}
df <- datasets::chickwts

model <- rethinking::map(
        alist(
          weight ~ dnorm(mu, sigma),
          mu <- a[feed],
          a[feed] ~ dnorm(258, 78),
          sigma ~ dunif(0.0, 150)
        ),
        data = df
      )





for (i in seq_along(ii)){
 print(ii[i])
 print(summary(df[df$feed == i , "weight"]))
}



ordered.names <- unique(df[, "feed"])
post <- rethinking::extract.samples(model)
    
   
    ## plots of posterior
    # temp <- df[, c("Key", "KEY_ID")] %>% unique()
    # ordered.names <- dplyr::arrange(temp, KEY_ID)[, 1]

    temp <- post$a %>% as.data.frame()
    names(temp) <- ordered.names
    ### First plot ####
    # output$PosteriorDensityRidges <- renderPlot({
      ggplot(
        gather(temp, KEY, VALUE, seq(1, ncol(temp))),
        aes(x = VALUE, y = KEY, fill = KEY)
      ) +
        ggridges::geom_density_ridges(alpha = 0.5)+
      labs(x = "Weight in grams", y = "Feed Type")
    # })

    ### Prep plots of differences of posteriors ####

    temp.diffs <- as.data.frame(matrix(NA,
      nrow = nrow(temp),
      ncol = sum(seq(1, (ncol(temp) - 1)))
    ))
    

    empty.col <- 1
    for (i in seq(1, length(ordered.names) - 1)) {
      for (j in seq(i + 1, length(ordered.names))) {
        temp.diffs[, empty.col] <- temp[, i] - temp[, j]
        names(temp.diffs)[empty.col] <- paste0(ordered.names[i], "-", ordered.names[j])
        # print(paste(i, j))
        empty.col <- empty.col + 1
      }
    }
    
    ### Make a nice figure that can be produced from one difference column.
    # Shade HDPI for 67, 89, 97 because they're all prime
    plt.list <- purrr::map(seq(1, ncol(temp.diffs)), function(i) {
      # i=1
      # ref : http://rstudio-pubs-static.s3.amazonaws.com/5475_d63ad1667701424c9a1292ee766b45bb.html

      temp.diffs.plt <- with(density(temp.diffs[, i]), data.frame(x, y))
      # names(temp.diffs.plt) <- c(names(temp.diffs)[i], "Density")
      HPDI.67 <- rethinking::HPDI(temp.diffs[, i], prob = 0.67)
      HPDI.89 <- rethinking::HPDI(temp.diffs[, i], prob = 0.89)
      HPDI.97 <- rethinking::HPDI(temp.diffs[, i], prob = 0.97)
      CMODE <- rethinking::chainmode(temp.diffs[, i])

      ggplot(temp.diffs.plt, aes_string(x = "x", y = "y")) +
        geom_segment(aes(x = HPDI.97[1],
                           xend = HPDI.97[2],
                           y= 0,
                            yend = 0,),
                     size = 3,
                     color = "deepskyblue1", alpha = 0.4)+
        
      geom_segment(aes(x = HPDI.89[1],
                       xend = HPDI.89[2],
                       y= 0,
                       yend = 0,), 
                   size = 3,
                   color = "deepskyblue3", alpha = 0.4)+
      
      geom_segment(aes(x = HPDI.67[1],
                       xend = HPDI.67[2],
                       y= 0,
                       yend = 0,), 
                   size = 3,
                   color = "deepskyblue4", alpha = 0.4)+

        # geom_area(aes(x = ifelse(x > HPDI.97[1] & x < HPDI.97[2], x, 0)),
        #   fill = "firebrick", alpha = 0.4
        # ) +
        # geom_area(aes(x = ifelse(x > HPDI.89[1] & x < HPDI.89[2], x, 0)),
        #   fill = "firebrick", alpha = 0.4
        # ) +
        # geom_area(aes(x = ifelse(x > HPDI.67[1] & x < HPDI.67[2], x, 0)),
        #   fill = "firebrick", alpha = 0.4
        # ) +
        geom_vline(xintercept = CMODE, size = 1, linetype = "dashed", color = "black") +
        geom_vline(xintercept = 0, size = 1, linetype = "dashed", color = "steelblue") +
        geom_line(size = 1) +
        scale_y_continuous(limits = c(0, max(temp.diffs.plt$y))) +
        labs(x = names(temp.diffs)[i], y = "Density")
    })

    ### Multi-plot figure ####
    # output$SubtractedPosteriors <- renderPlot({
      cowplot::plot_grid(plotlist = plt.list, ncol = 2)
    # })
    
    
    
    
    
    # NOTE: If this function is defined earlier (beginning of file) it does not execute properly
    new_precis <- function(input.df = temp,
                           HDPI.prob = 0.89) {
      output.df <- as.data.frame(matrix(NA,
                                        nrow = ncol(input.df),
                                        ncol = 5
      ))
      
      for (i in seq(1, ncol(input.df))) {
        output.df[i, 1] <- names(input.df)[i]
        
        output.df[i, 2:5] <- c(
          round(mean(input.df[, i]), digits = 2),
          round(sd(input.df[, i]), digits = 2),
          rethinking::HPDI(input.df[, i], prob = HDPI.prob)
        )
      }
      
      names(output.df) <- c(
        "Comparison", "Mean", "StdDev",
        paste("|", as.character(HDPI.prob)),
        paste(as.character(HDPI.prob), "|")
      )
      
      return(output.df)
    }
    
    ### table of posteriors ####
    # output$PosteriorStats <- renderTable({
      new_precis(temp, HDPI.prob = .97) %>% write.csv(., file = "C:/Users/drk8b9/Desktop/distribution.csv")
    # })
    
    ### table  of differences of posteriors ####
    # output$SubtractedPosteriorsStats <- renderTable({
      new_precis(temp.diffs, HDPI.prob = .97) %>% write.csv(., file = "C:/Users/drk8b9/Desktop/distribution.csv")
    # })
  
  })






```

```{r}
df <- abd::MoleRats
df$caste <- as.character(df$caste)
df[df$caste == "lazy", "caste"] <- "non_worker"
df$caste <- as.factor(df$caste)


ggplot(df, aes(x = caste, y = ln.energy, color = caste))+
  geom_quasirandom()+
  theme(legend.position = "bottom")



model <- rethinking::map(
        alist(
          ln.energy ~ dnorm(mu, sigma),
          mu <- a[caste],
          a[caste] ~ dnorm(4, 3),
          sigma ~ dunif(0.0, 10)
        ),
        data = df
      )







ordered.names <- unique(df[, "caste"])
post <- rethinking::extract.samples(model)
    
   
    ## plots of posterior
    # temp <- df[, c("Key", "KEY_ID")] %>% unique()
    # ordered.names <- dplyr::arrange(temp, KEY_ID)[, 1]

    temp <- post$a %>% as.data.frame()
    names(temp) <- ordered.names
    ### First plot ####
    # output$PosteriorDensityRidges <- renderPlot({
      ggplot(
        gather(temp, KEY, VALUE, seq(1, ncol(temp))),
        aes(x = VALUE, y = KEY, fill = KEY)
      ) +
        ggridges::geom_density_ridges(alpha = 0.5)+
      labs(x = "ln energy expenditure", y = "Caste Type")
    # })

    ### Prep plots of differences of posteriors ####

    temp.diffs <- as.data.frame(matrix(NA,
      nrow = nrow(temp),
      ncol = sum(seq(1, (ncol(temp) - 1)))
    ))
    

    empty.col <- 1
    for (i in seq(1, length(ordered.names) - 1)) {
      for (j in seq(i + 1, length(ordered.names))) {
        temp.diffs[, empty.col] <- temp[, i] - temp[, j]
        names(temp.diffs)[empty.col] <- paste0(ordered.names[i], "-", ordered.names[j])
        # print(paste(i, j))
        empty.col <- empty.col + 1
      }
    }
    
    ### Make a nice figure that can be produced from one difference column.
    # Shade HDPI for 67, 89, 97 because they're all prime
    plt.list <- purrr::map(seq(1, ncol(temp.diffs)), function(i) {
      # i=1
      # ref : http://rstudio-pubs-static.s3.amazonaws.com/5475_d63ad1667701424c9a1292ee766b45bb.html

      temp.diffs.plt <- with(density(temp.diffs[, i]), data.frame(x, y))
      # names(temp.diffs.plt) <- c(names(temp.diffs)[i], "Density")
      HPDI.67 <- rethinking::HPDI(temp.diffs[, i], prob = 0.67)
      HPDI.89 <- rethinking::HPDI(temp.diffs[, i], prob = 0.89)
      HPDI.97 <- rethinking::HPDI(temp.diffs[, i], prob = 0.97)
      CMODE <- rethinking::chainmode(temp.diffs[, i])

      ggplot(temp.diffs.plt, aes_string(x = "x", y = "y")) +
        geom_segment(aes(x = HPDI.97[1],
                           xend = HPDI.97[2],
                           y= 0,
                            yend = 0,),
                     size = 3,
                     color = "deepskyblue1", alpha = 0.4)+
        
      geom_segment(aes(x = HPDI.89[1],
                       xend = HPDI.89[2],
                       y= 0,
                       yend = 0,), 
                   size = 3,
                   color = "deepskyblue3", alpha = 0.4)+
      
      geom_segment(aes(x = HPDI.67[1],
                       xend = HPDI.67[2],
                       y= 0,
                       yend = 0,), 
                   size = 3,
                   color = "deepskyblue4", alpha = 0.4)+

        # geom_area(aes(x = ifelse(x > HPDI.97[1] & x < HPDI.97[2], x, 0)),
        #   fill = "firebrick", alpha = 0.4
        # ) +
        # geom_area(aes(x = ifelse(x > HPDI.89[1] & x < HPDI.89[2], x, 0)),
        #   fill = "firebrick", alpha = 0.4
        # ) +
        # geom_area(aes(x = ifelse(x > HPDI.67[1] & x < HPDI.67[2], x, 0)),
        #   fill = "firebrick", alpha = 0.4
        # ) +
        geom_vline(xintercept = CMODE, size = 1, linetype = "dashed", color = "black") +
        geom_vline(xintercept = 0, size = 1, linetype = "dashed", color = "steelblue") +
        geom_line(size = 1) +
        scale_y_continuous(limits = c(0, max(temp.diffs.plt$y))) +
        labs(x = names(temp.diffs)[i], y = "Density")
    })

    ### Multi-plot figure ####
    # output$SubtractedPosteriors <- renderPlot({
      cowplot::plot_grid(plotlist = plt.list, ncol = 2)
    # })
    
    
    
    
    
    # NOTE: If this function is defined earlier (beginning of file) it does not execute properly
    new_precis <- function(input.df = temp,
                           HDPI.prob = 0.89) {
      output.df <- as.data.frame(matrix(NA,
                                        nrow = ncol(input.df),
                                        ncol = 5
      ))
      
      for (i in seq(1, ncol(input.df))) {
        output.df[i, 1] <- names(input.df)[i]
        
        output.df[i, 2:5] <- c(
          round(mean(input.df[, i]), digits = 2),
          round(sd(input.df[, i]), digits = 2),
          rethinking::HPDI(input.df[, i], prob = HDPI.prob)
        )
      }
      
      names(output.df) <- c(
        "Comparison", "Mean", "StdDev",
        paste("|", as.character(HDPI.prob)),
        paste(as.character(HDPI.prob), "|")
      )
      
      return(output.df)
    }
    
    ### table of posteriors ####
    # output$PosteriorStats <- renderTable({
      new_precis(temp, HDPI.prob = .97) %>% write.csv(., file = "C:/Users/drk8b9/Desktop/distribution.csv")
    # })
    
    ### table  of differences of posteriors ####
    # output$SubtractedPosteriorsStats <- renderTable({
      new_precis(temp.diffs, HDPI.prob = .97) %>% write.csv(., file = "C:/Users/drk8b9/Desktop/distribution.csv")
    # })
  

```



```{r}
if (input$ManualPriors == T) {
      a_mu <<- as.numeric(input$a_mu)
      a_sigma <<- as.numeric(input$a_sigma)
      b_mu <<- as.numeric(input$b_mu)
      b_sigma <<- as.numeric(input$b_sigma)
      sigma_min <<- as.numeric(input$sigma_min)
      sigma_max <<- as.numeric(input$sigma_max)
    } else {

      # FIXME how can we calculate reasonable priors?

      # a_mu <- 73
      # a_sigma <- 13
      a_mu <<- median(df$Value)
      a_sigma <<- sd(df$Value)

      if (input$CtrlEffect != "No") {
        # df[[as.character(input$CtrlEffect)]]

        # b_mu <- 0
        # b_sigma <- 5
        b_mu <<- as.numeric(median(df$Value) / 2) #5
        b_sigma <<- as.numeric(sd(df$Value) / 2)
      }

      # sigma_min <- 0
      # sigma_max <- 40
      sigma_min <<- as.numeric(0.001)
      sigma_max <<- as.numeric(2 * (max(df$Value) - min(df$Value)))
    }

    ### Fit model with MAP ####

    df$KEY_ID <- rethinking::coerce_index(df$Key)


    print(input$CtrlEffect)
    if (input$CtrlEffect != "No") {
      # FIXME if someone types in a non valid name this could break
      # Add an else that controls for individual effect
      # use coerce_index to make sure that we know what the controled factor is.
      df$CTRL_BY <- rethinking::coerce_index(df[[as.character(input$CtrlEffect)]])
      print("running model with factor controlled")
      model <- rethinking::map(
        alist(
          Value ~ dnorm(mu, sigma),
          mu <- a[KEY_ID] + b[CTRL_BY],
          a[KEY_ID] ~ dnorm(a_mu, a_sigma),
          b[CTRL_BY] ~ dnorm(b_mu, b_sigma),
          sigma ~ dunif(sigma_min, sigma_max)
        ),
        data = df
      )
    } else if (input$CtrlEffect == "No") {
      print("running model without factor controlled")
      model <- rethinking::map(
        alist(
          Value ~ dnorm(mu, sigma),
          mu <- a[KEY_ID],
          a[KEY_ID] ~ dnorm(a_mu, a_sigma),
          sigma ~ dunif(sigma_min, sigma_max)
        ),
        data = df
      )
    } else {
      warning("Controlled effect is neither 'No' nor a column name")
    }


    post <- rethinking::extract.samples(model)
    
   
    ## plots of posterior
    temp <- df[, c("Key", "KEY_ID")] %>% unique()
    ordered.names <- dplyr::arrange(temp, KEY_ID)[, 1]

    temp <- post$a %>% as.data.frame()
    names(temp) <- ordered.names
    ### First plot ####
    output$PosteriorDensityRidges <- renderPlot({
      ggplot(
        gather(temp, KEY, VALUE, seq(1, ncol(temp))),
        aes(x = VALUE, y = KEY, fill = KEY)
      ) +
        ggridges::geom_density_ridges(alpha = 0.5)
    })

    ### Prep plots of differences of posteriors ####

    temp.diffs <- as.data.frame(matrix(NA,
      nrow = nrow(temp),
      ncol = sum(seq(1, (ncol(temp) - 1)))
    ))
    

    empty.col <- 1
    for (i in seq(1, length(ordered.names) - 1)) {
      for (j in seq(i + 1, length(ordered.names))) {
        temp.diffs[, empty.col] <- temp[, i] - temp[, j]
        names(temp.diffs)[empty.col] <- paste0(ordered.names[i], "-", ordered.names[j])
        # print(paste(i, j))
        empty.col <- empty.col + 1
      }
    }
    
    ### Make a nice figure that can be produced from one difference column.
    # Shade HDPI for 67, 89, 97 because they're all prime
    plt.list <- purrr::map(seq(1, ncol(temp.diffs)), function(i) {
      # i=1
      # ref : http://rstudio-pubs-static.s3.amazonaws.com/5475_d63ad1667701424c9a1292ee766b45bb.html

      temp.diffs.plt <- with(density(temp.diffs[, i]), data.frame(x, y))
      # names(temp.diffs.plt) <- c(names(temp.diffs)[i], "Density")
      HPDI.67 <- rethinking::HPDI(temp.diffs[, i], prob = 0.67)
      HPDI.89 <- rethinking::HPDI(temp.diffs[, i], prob = 0.89)
      HPDI.97 <- rethinking::HPDI(temp.diffs[, i], prob = 0.97)
      CMODE <- rethinking::chainmode(temp.diffs[, i])

      ggplot(temp.diffs.plt, aes_string(x = "x", y = "y")) +
        geom_segment(aes(x = HPDI.97[1],
                           xend = HPDI.97[2],
                           y= 0,
                            yend = 0,),
                     size = 3,
                     color = "deepskyblue1", alpha = 0.4)+
        
      geom_segment(aes(x = HPDI.89[1],
                       xend = HPDI.89[2],
                       y= 0,
                       yend = 0,), 
                   size = 3,
                   color = "deepskyblue3", alpha = 0.4)+
      
      geom_segment(aes(x = HPDI.67[1],
                       xend = HPDI.67[2],
                       y= 0,
                       yend = 0,), 
                   size = 3,
                   color = "deepskyblue4", alpha = 0.4)+

        # geom_area(aes(x = ifelse(x > HPDI.97[1] & x < HPDI.97[2], x, 0)),
        #   fill = "firebrick", alpha = 0.4
        # ) +
        # geom_area(aes(x = ifelse(x > HPDI.89[1] & x < HPDI.89[2], x, 0)),
        #   fill = "firebrick", alpha = 0.4
        # ) +
        # geom_area(aes(x = ifelse(x > HPDI.67[1] & x < HPDI.67[2], x, 0)),
        #   fill = "firebrick", alpha = 0.4
        # ) +
        geom_vline(xintercept = CMODE, size = 1, linetype = "dashed", color = "black") +
        geom_vline(xintercept = 0, size = 1, linetype = "dashed", color = "steelblue") +
        geom_line(size = 1) +
        scale_y_continuous(limits = c(0, max(temp.diffs.plt$y))) +
        labs(x = names(temp.diffs)[i], y = "Density")
    })

    ### Multi-plot figure ####
    output$SubtractedPosteriors <- renderPlot({
      cowplot::plot_grid(plotlist = plt.list, ncol = 2)
    })
    
    
    
    
    
    # NOTE: If this function is defined earlier (beginning of file) it does not execute properly
    new_precis <- function(input.df = temp,
                           HDPI.prob = 0.89) {
      output.df <- as.data.frame(matrix(NA,
                                        nrow = ncol(input.df),
                                        ncol = 5
      ))
      
      for (i in seq(1, ncol(input.df))) {
        output.df[i, 1] <- names(input.df)[i]
        
        output.df[i, 2:5] <- c(
          round(mean(input.df[, i]), digits = 2),
          round(sd(input.df[, i]), digits = 2),
          rethinking::HPDI(input.df[, i], prob = HDPI.prob)
        )
      }
      
      names(output.df) <- c(
        "Comparison", "Mean", "StdDev",
        paste("|", as.character(HDPI.prob)),
        paste(as.character(HDPI.prob), "|")
      )
      
      return(output.df)
    }
    
    ### table of posteriors ####
    output$PosteriorStats <- renderTable({
      new_precis(temp, HDPI.prob = input$HPDIProb)
    })
    
    ### table  of differences of posteriors ####
    output$SubtractedPosteriorsStats <- renderTable({
      new_precis(temp.diffs, HDPI.prob = input$HPDIProb)
    })
  
  })
```

